{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"__rdm",
				"__rdm_controller"
			],
			[
				"RMD",
				"RDM_Uid"
			],
			[
				"uint",
				"uint16_t"
			],
			[
				"get",
				"getCellByCoordinates"
			],
			[
				"levelP",
				"levelPrefix"
			],
			[
				"player",
				"playerSprite"
			],
			[
				"bla",
				"bladeClip"
			],
			[
				"to",
				"to_bytes"
			],
			[
				"scene",
				"scenePinMap"
			],
			[
				"serialO",
				"serialObject"
			],
			[
				"tick",
				"tickSize"
			],
			[
				"SCE",
				"SCREEN_SIZE"
			],
			[
				"beg",
				"beginningWords"
			],
			[
				"start",
				"startIndex"
			],
			[
				"star",
				"startIndex"
			],
			[
				"random",
				"randomstartwords"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Rdm_Uid.h",
			"settings":
			{
				"buffer_size": 2605,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Rdm_Defines.h",
			"settings":
			{
				"buffer_size": 11018,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*\n  Conceptinetics.h - DMX library for Arduino\n  Copyright (c) 2013 W.A. van der Meeren <danny@illogic.nl>.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 3 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n/*\n  This code has been tested using the following hardware:\n\n  - Arduino / Genuino UNO R3 using a CTC-DRA-13-1 ISOLATED DMX-RDM SHIELD \n  - Arduino / Genuino MEGA2560 R3 using a CTC-DRA-13-1 ISOLATED DMX-RDM SHIELD \n  - Arduino / Genuino Leonardo using a CTC-DRA-13-R2 ISOLATED DMX-RDM SHIELD \n\n  - CTC-DRA-10-1 and CTC-DRA-10-R2 is the Non-isolated costs effective DMX-RDM shield \n*/\n\n\n#ifndef DMX2_H_\n#define DMX2_H_\n\n#include <Arduino.h>\n#include <inttypes.h>\n\n#include \"Rdm_Uid.h\"\n#include \"Rdm_Defines.h\"\n\n#define DMX_MAX_FRAMESIZE       513     // Startbyte + 512 Slots\n#define DMX_MIN_FRAMESIZE       2       // Startbyte + 1 Slot\n\n#define DMX_MAX_FRAMECHANNELS   512     // Maxmim number of channer per frame\n\n#define DMX_STARTCODE_SIZE      1       // Size of startcode in bytes\n\n#define DMX_START_CODE          0x0     // Start code for a DMX frame\n#define RDM_START_CODE          0xcc    // Start code for a RDM frame\n\n// Uncomment to enable Inter slot delay ) (avg < 76uSec) ... \n// mimum is zero according to specification\n// #define DMX_IBG\t\t\t\t    10      // Inter slot time\n\n// Speed your Arduino is running on in Hz.\n#define F_OSC \t\t\t\t    16000000UL\n\n// DMX Baudrate, this should be 250000\n#define DMX_BAUD_RATE \t\t    250000\n\n// The baudrate used to automaticly generate a break within\n// your ISR.. make it lower to generate longer breaks\n//#define DMX_BREAK_RATE \t \t    99900       \n\n// 2017, Feb 28: Set to appox 176us\n#define DMX_BREAK_RATE          49950       \n\n// Tabel 3-2 ANSI_E1-20-2010 \n// Minimum time to allow the datalink to 'turn arround'\n#define MIN_RESPONDER_PACKET_SPACING_USEC   176 /*176*/\n\n// Define which serial port to use as DMX port, only one can be \n// selected at the time by uncommenting one of the following\n// lines\n#define USE_DMX_SERIAL_0\n//#define USE_DMX_SERIAL_1\n//#define USE_DMX_SERIAL_2\n//#define USE_DMX_SERIAL_3\n\nnamespace dmx \n{\n    enum dmxState \n\t{\n        dmxUnknown,\n        dmxStartByte,\n        dmxWaitStartAddress,\n        dmxData,\n        dmxFrameReady,\n\t};\n};\n\nnamespace rdm\n{\n    enum rdmState\n    {\n        rdmUnknown,\n        rdmStartByte,\n        rdmSubStartCode,\n        rdmMessageLength,\n        rdmData,\n        rdmChecksumHigh,\n        rdmChecksumLow,\n        rdmFrameReady,\n    };\n};\n\nstruct IFrameBuffer\n{\n    virtual uint16_t    getBufferSize   ( void ) = 0;        \n\n    virtual uint8_t     getSlotValue    ( uint16_t index ) = 0;\n    virtual void        setSlotValue    ( uint16_t index, uint8_t value ) = 0;\n};\n\nclass DMX_FrameBuffer : IFrameBuffer\n{\n    public:\n        //\n        // Constructor buffersize = 1-513\n        //\n        DMX_FrameBuffer     ( uint16_t buffer_size );\n        DMX_FrameBuffer     ( DMX_FrameBuffer &buffer );\n        ~DMX_FrameBuffer    ( void );\n\n        uint16_t getBufferSize ( void );        \n\n        uint8_t getSlotValue ( uint16_t index );\n        void    setSlotValue ( uint16_t index, uint8_t value );\n        void    setSlotRange ( uint16_t start, uint16_t end, uint8_t value );\n        void    clear ( void );        \n\n        uint8_t &operator[] ( uint16_t index );\n\n    private:\n\n        uint8_t     *m_refcount;\n        uint16_t    m_bufferSize;\n        uint8_t     *m_buffer;      \n};\n\n\n//\n// DMX Master controller\n//\nclass DMX_Master\n{\n    public:\n        // Run the DMX master from a pre allocated frame buffer which\n        // you have fully under your own control\n        DMX_Master ( DMX_FrameBuffer &buffer, int readEnablePin  );\n        \n        // Run the DMX master by giving a predefined maximum number of\n        // channels to support\n        DMX_Master ( uint16_t maxChannel, int readEnablePin );\n\n        ~DMX_Master ( void );\n    \n        void enable  ( void );              // Start transmitting\n        void disable ( void );              // Stop transmitting\n\n        // Get reference to the internal framebuffer\n        DMX_FrameBuffer &getBuffer ( void );\n\n        // Update channel values\n        void setChannelValue ( uint16_t channel, uint8_t value );\n        void setChannelRange ( uint16_t start, uint16_t end, uint8_t value );\n\n    public:\n        //\n        // Manual control over the break period\n        //\n        void setAutoBreakMode ( void );     // Generated from ISR\n        void setManualBreakMode ( void );   // Generate manually\n\n        uint8_t autoBreakEnabled ( void );\n\n        // We are waiting for a manual break to be generated \n        uint8_t waitingBreak ( void );\n        \n        // Generate break and start transmission of frame\n        void breakAndContinue ( uint8_t breakLength_us = 100 );\n\n\n    protected:\n        void setStartCode ( uint8_t value ); \n\n\n    private:\n        DMX_FrameBuffer m_frameBuffer;\n        uint8_t         m_autoBreak;\n};\n\n\n//\n// DMX Slave controller\n//\nclass DMX_Slave : public DMX_FrameBuffer\n{\n    public:\n        DMX_Slave ( DMX_FrameBuffer &buffer, int readEnablePin = -1 );\n\n        // nrChannels is the consecutive DMX512 slots required\n        // to operate this slave device\n        DMX_Slave ( uint16_t nrChannels, int readEnablePin = -1 );\n\n        ~DMX_Slave ( void );\n\n        void enable     ( void );           // Enable receiver\n        void disable    ( void );           // Disable receiver\n\n \n        // Get reference to the internal framebuffer\n        DMX_FrameBuffer &getBuffer ( void );\n\n        uint8_t  getChannelValue ( uint16_t channel );\n\n        uint16_t getStartAddress ( void );\n        void     setStartAddress ( uint16_t );\n\n\n        // Process incoming byte from USART\n        bool processIncoming   ( uint8_t val, bool first = false );\n\n        // Register on receive complete callback in case\n        // of time critical applications\n        void onReceiveComplete ( void (*func)(unsigned short) );\n\n    protected:\n\n\n    private:\n        uint16_t        m_startAddress;     // Slave start address\n        dmx::dmxState   m_state;\n\n        static void (*event_onFrameReceived)(unsigned short channelsReceived);\n};\n\n\nclass RDM_FrameBuffer : public IFrameBuffer\n{\n    public:\n        //\n        // Constructor\n        //\n        RDM_FrameBuffer     ( void ) {};\n        ~RDM_FrameBuffer    ( void ) {};\n\n        uint16_t getBufferSize ( void );        \n\n        uint8_t getSlotValue ( uint16_t index );\n        void    setSlotValue ( uint16_t index, uint8_t value );\n        void    clear ( void );        \n\n        uint8_t &operator[] ( uint16_t index );\n\n    public: // functions to provide access from USART       \n        // Process incoming byte from USART, \n        // returns false when no more data is accepted\n        bool processIncoming ( uint8_t val, bool first = false );\n\n        // Process outgoing byte to USART\n        // returns false when no more data is available\n        bool fetchOutgoing ( volatile uint8_t *udr, bool first = false );\n\n    protected:\n        // Process received frame\n        virtual void processFrame ( void ) = 0;\n\n    //private:\n    protected:\n        rdm::rdmState   m_state;       // State for pushing the message in\n        RDM_Message     m_msg;\n        RDM_Checksum    m_csRecv;      // Checksum received in rdm message\n        RDM_Checksum    m_csSend;\n};\n\n//\n// RDM_Responder \n//\nclass RDM_Responder : public RDM_FrameBuffer\n{\n    public:\n        //\n        // m        = manufacturer id (16bits)\n        // d1-d4    = device id (32bits)\n        //\n        RDM_Responder   ( uint16_t m, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, DMX_Slave &slave);\n        ~RDM_Responder  ( void );\n\n        void    setDeviceInfo \n                ( \n                    uint16_t deviceModelId, \n                    rdm::RdmProductCategory productCategory,\n                    uint8_t personalities = 1,\n                    uint8_t personality = 1\n                )\n        {\n            m_DeviceModelId         = deviceModelId;\n            m_ProductCategory       = productCategory;\n            m_Personalities         = personalities;\n            m_Personality           = personality;\n        };\n\n        //\n        // Set vendor software version id\n        //\n        // v1 = MOST SIGNIFICANT\n        // v2... \n        // v3...\n        // v4 = LEAST SIGNIFICANT\n        //\n        void    setSoftwareVersionId ( uint8_t v1, uint8_t v2, uint8_t v3, uint8_t v4 )\n        {\n            m_SoftwareVersionId[0] = v1;\n            m_SoftwareVersionId[1] = v2;\n            m_SoftwareVersionId[2] = v3;\n            m_SoftwareVersionId[3] = v4;\n        }\n\n        // Currently no sensors and subdevices supported\n        // void    AddSensor ( void );\n        // void    AddSubDevice ( void );\n\n        uint8_t getPersonality ( void ) { return m_Personality; };\n        void    setPersonality ( uint8_t personality ) { m_Personality = personality; };\n   \n        // Register on identify device event handler\n        void    onIdentifyDevice ( void (*func)(bool) );\n        void    onDeviceLabelChanged ( void (*func) (const char*, uint8_t) );\n        void    onDMXStartAddressChanged ( void (*func) (uint16_t) );\n        void    onDMXPersonalityChanged ( void (*func) (uint8_t) );\n\n\n        // Set the device label\n        void    setDeviceLabel ( const char *label, size_t len );\n\n        // Enable, Disable rdm responder\n        void enable ( void )    { m_rdmStatus.enabled = true; m_rdmStatus.mute = false; };\n        void disable ( void )   { m_rdmStatus.enabled = false; };\n\n        union\n        {\n            uint8_t  raw;\n            struct\n            {\n                uint8_t mute:1; \n                uint8_t ident:1;\n                uint8_t enabled:1;  // Rdm responder enable/disable\n            };\n        } m_rdmStatus;\n\n\n    protected:  \n        virtual void processFrame ( void );\n\n        // Discovery to unque brach packets only requires\n        // the data part of the packet to be transmitted\n        // without breaks or header\n        void repondDiscUniqueBranch ( void );\n\n        // Helpers for generating response packets which \n        // have larger datafields\n        void populateDeviceInfo ( void );\n\n    private:\n        RDM_Uid                     m_devid;            // Holds our unique device ID\n        uint8_t                     m_Personalities;    // The total number of supported personalities\n        uint8_t                     m_Personality;      // The currently active personality\n        uint16_t                    m_DeviceModelId;\n        uint8_t                     m_SoftwareVersionId[4]; // 32 bit Software version\n        rdm::RdmProductCategory     m_ProductCategory;\n \n        char                        m_deviceLabel[32];  // Device label\n\n        static void (*event_onIdentifyDevice)(bool);\n        static void (*event_onDeviceLabelChanged)(const char*, uint8_t);\n        static void (*event_onDMXStartAddressChanged)(uint16_t);\n        static void (*event_onDMXPersonalityChanged)(uint8_t);\n};\n\nclass RDM_Controller : public RDM_FrameBuffer\n{\n    public:\n        RDM_Controller   ( uint16_t m, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, DMX_Master &master);\n        ~RDM_Controller  ( void );\n\n        void enable ( void )    { m_rdmStatus.enabled = true;};\n        void disable ( void )   { m_rdmStatus.enabled = false; };\n\n        void setDMXAddress(uint16_t address, uint16_t dest_m_id, uint8_t ddid1,  uint8_t ddid2, uint8_t ddid3, uint8_t ddid4, uint8_t TN = 0, uint8_t port = 0, uint8_t sub = 0);   \n        void setDMXAddress(uint16_t address, RDM_Uid uid);\n\n        union\n            {\n                uint8_t  raw;\n                struct\n                {\n                    uint8_t enabled:1;  // Rdm responder enable/disable\n                };\n            } m_rdmStatus;\n    protected:\n        virtual void processFrame ( void );\n    private:\n        RDM_Uid                     m_devid;\n};\n\n\n#endif /* DMX2_H_ */\n",
			"file": "DMX2.h",
			"file_size": 13020,
			"file_write_time": 132386451744227047,
			"settings":
			{
				"buffer_size": 12616,
				"line_ending": "Windows"
			}
		},
		{
			"file": "DMX2.cpp",
			"settings":
			{
				"buffer_size": 37085,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/robos/Documents/Arduino/libraries/DMX2/DMX2.cpp",
		"/D/VideoCaptures/ML_JLCPCBA/PCBA1 Script.txt",
		"/C/Users/robos/Documents/Arduino/libraries/DMX2/examples/RDM_Slave/RDM_Slave.ino",
		"/C/Users/robos/Documents/Arduino/libraries/DMX2/Conceptinetics.cpp",
		"/C/Users/robos/Documents/Arduino/libraries/DMX2/Conceptinetics.h",
		"/C/Users/robos/Documents/Arduino/libraries/Conceptinetics2/Conceptinetics.h",
		"/C/Users/robos/Documents/Arduino/libraries/Conceptinetics2/Conceptinetics.cpp",
		"/C/Users/robos/Documents/Arduino/libraries/Conceptinetics2/Rdm_Uid.h",
		"/C/Users/robos/Documents/Arduino/libraries/Conceptinetics2/Rdm_Defines.h",
		"/C/Users/robos/Documents/Arduino/libraries/Conceptinetics/Conceptinetics.h",
		"/C/Users/robos/Documents/Arduino/libraries/Conceptinetics/Conceptinetics.cpp",
		"/D/VideoCaptures/ML_JLCPCBA/PCBA1 Scripts",
		"/C/Program Files (x86)/Arduino/hardware/arduino/avr/platform.txt",
		"/C/Program Files (x86)/Arduino/hardware/tools/avr/avr/include/avr/iom328pb.h",
		"/C/Program Files (x86)/Arduino/hardware/tools/avr/avr/include/avr/io.h",
		"/C/Program Files (x86)/Arduino/hardware/arduino/avr/cores/arduino/Arduino.h",
		"/D/VideoCaptures/ML_Assembl/ML TODO",
		"/C/Program Files (x86)/Arduino/libraries/Servo/src/avr/ServoTimers.h",
		"/C/Program Files (x86)/Arduino/libraries/Servo/src/avr/Servo.cpp",
		"/C/Program Files (x86)/Arduino/hardware/arduino/avr/variants/standard/pins_arduino.h",
		"/C/Program Files (x86)/Arduino/hardware/arduino/avr/cores/arduino/wiring.c",
		"/C/Users/robos/Downloads/Lisle Shopping List",
		"/C/Users/robos/Downloads/DMX_Slave_Test.c",
		"/C/Users/robos/Documents/Arduino/MovingLight/DMX_Master_Test/DMX_Master_Test.ino",
		"/C/Users/robos/Documents/Arduino/libraries/RadioHead/RHCRC.cpp",
		"/C/Users/robos/Documents/Arduino/libraries/RadioHead/RHCRC.h",
		"/C/Program Files (x86)/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp",
		"/C/Program Files (x86)/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.h",
		"/C/Users/robos/Documents/Arduino/libraries/RadioHead/RH_ASK.h",
		"/C/Users/robos/Documents/Arduino/libraries/RadioHead/RH_ASK.cpp",
		"/C/Users/robos/Documents/Python Programs/FEC/FECdownload.py",
		"/D/Physical Designs/_As Printed/MovingLight-JG/6-16-20/ML6-16-20.gcode",
		"/C/Program Files (x86)/Arduino/hardware/arduino/avr/firmwares/atmegaxxu2/arduino-usbserial/Lib/LightweightRingBuff.h",
		"/C/Program Files (x86)/Arduino/hardware/arduino/avr/firmwares/atmegaxxu2/arduino-usbserial/Board/LEDs.h",
		"/C/Program Files (x86)/Arduino/hardware/arduino/avr/firmwares/atmegaxxu2/arduino-usbserial/Arduino-usbserial.c",
		"/C/Program Files (x86)/Arduino/hardware/arduino/avr/firmwares/atmegaxxu2/arduino-usbserial/Descriptors.h",
		"/C/Program Files (x86)/Arduino/hardware/arduino/avr/firmwares/atmegaxxu2/arduino-usbserial/Arduino-usbserial-atmega16u2-Uno-Rev3.hex",
		"/C/Program Files (x86)/Arduino/hardware/arduino/avr/firmwares/atmegaxxu2/arduino-usbserial/Arduino-usbserial.h",
		"/C/Users/robos/Documents/Python Programs/OBS/wta_tkinter.py",
		"/C/Users/robos/Documents/Python Programs/OBS/serialTest.py",
		"/D/Physical Designs/_As Printed/Benchy/benchy-5-26-20.gcode",
		"/E/octopi-wpa-supplicant.txt",
		"/C/Users/robos/Documents/Free Serial Port Monitor/COM3port.txt",
		"/C/Users/robos/Documents/Python Programs/OBS/blink.py",
		"/C/Program Files (x86)/Arduino/hardware/arduino/avr/cores/arduino/wiring_private.h",
		"/C/Program Files (x86)/Arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c",
		"/C/Program Files (x86)/Arduino/hardware/arduino/avr/cores/arduino/main.cpp",
		"/C/Program Files (x86)/Arduino/hardware/arduino/avr/boards.txt",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/testTilesProps.tsx",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/enemies.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/entity_sprite.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/levels/large-test/level_1.tmx",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/levelLoader.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/camera.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/player.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/worldFunctions.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/entity.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/engine.py",
		"/C/Users/robos/Documents/Arduino/CompositeVideo/i2s_periph.h",
		"/C/Users/robos/Documents/Arduino/CompositeVideoSimple/esp_pm.h",
		"/C/Users/robos/Documents/Arduino/CompositeVideo/esp_err.h",
		"/C/Users/robos/Documents/Arduino/CompositeVideo/i2s.h",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/levels/2d-test/level_1.tmx",
		"/C/Users/robos/Documents/Python Programs/PyGame/sdCards/#main.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/levels/level_1.tmx",
		"/C/Users/robos/Documents/Python Programs/Orbit/engine.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/testCode.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/testMap3.csv",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/levels/level_1.csv",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/testlevel.py",
		"/C/Users/robos/Documents/Python Programs/Orbit/entity.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/images/bk1/splitter.py",
		"/C/Users/robos/Documents/Python Programs/covid19/arcdata.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/testTilesProps.json",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/testMap3.tmx",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/components/solid.py",
		"/C/Users/robos/Documents/Python Programs/covid19/arcmain.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/images/tiled_map/bk1..lua",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/images/tiled_map/bk1..json",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/images/tiled_map/testMap3..csv",
		"/C/Users/robos/Documents/Python Programs/Orbit/components/gravity.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/images/bk1/Tilemap/tileset_colored.tsx",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/objects/player.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/images/pacp0/Base pack/Player/p1_walk/p1_walk.json",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/components/__init__.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/platformer/images/platformer-art-complete-pack-0.zip",
		"/C/Users/robos/Documents/Python Programs/Orbit/__init__.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/main.py",
		"/C/Users/robos/Documents/Python Programs/PyGame/hexGame/hexTest.py",
		"/C/Users/robos/Documents/Python Programs/Video/videosplit.py",
		"/C/Users/robos/Documents/Python Programs/Video/converttomp4.py",
		"/C/Users/robos/Downloads/hexagon-pack/Spritesheets/hexagonObjects_sheet.xml",
		"/C/Users/robos/Downloads/hexagon-pack/Spritesheets/hexagonTerrain_sheet.png",
		"/D/VideoCaptures/converttomp4.py",
		"/C/Users/robos/Documents/Python Programs/Video/videotest.py",
		"/C/Users/robos/AppData/Local/Packages/PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0/LocalCache/local-packages/Python38/site-packages/moviepy/audio/AudioClip.py",
		"/C/Program Files (x86)/Arduino/libraries/Servo/src/Servo.h",
		"/C/Users/robos/Desktop/eric address",
		"/C/Users/robos/Documents/Python Programs/lascar/dataDisplay.py",
		"/C/Users/robos/Documents/Python Programs/lascar/pyShiftInTest.py",
		"/C/Users/robos/Documents/Python Programs/lascar/segmentData.py",
		"/C/Users/robos/Documents/Python Programs/lascar/digitDataTest.py",
		"/C/Users/robos/Documents/Python Programs/lascar/pySerialTest.py",
		"/C/Users/robos/Documents/Python Programs/lascar/visualization.py",
		"/C/Users/robos/Documents/Streaming Sources/3-29/chat 3-29-20",
		"/C/Users/robos/AppData/Roaming/obs-studio/logs/2020-03-28 20-19-26.txt",
		"/C/Users/robos/Documents/Streaming Sources/3-29/things to launch.txt",
		"/C/Users/robos/Desktop/wta_tallylights.bat",
		"/C/Users/robos/Documents/Python Programs/diceexperiment.py",
		"/C/Users/robos/Documents/Python Programs/tkinter_testing/tkinter_buttonresizeexample.py",
		"/C/Users/robos/Documents/Python Programs/tkinter_testing/tkinter_addressexcercise_2_interactive.py",
		"/C/Users/robos/Documents/Python Programs/OBS/websocket_to_arduino.py",
		"/C/Users/robos/Documents/Python Programs/OBS/wtadata.txt",
		"/C/Users/robos/Documents/Python Programs/tkinter_testing/tkinter_gridpack.py",
		"/C/Users/robos/Documents/Python Programs/OBS/wta_events.py",
		"/C/Users/robos/Documents/Python Programs/PythonUtils/Covid/fileList.py",
		"/C/Users/robos/Documents/Python Programs/textgen/textgen.py",
		"/C/Users/robos/Documents/Python Programs/OBS/websocket_event_test.py",
		"/C/Users/robos/Documents/Python Programs/tkinter_testing/tkinter_buttontests.py",
		"/C/Users/robos/Documents/Python Programs/tkinter_testing/tkinter_diceroller.py",
		"/C/Users/robos/Documents/Python Programs/tkinter_testing/tkinter_helloworld.py",
		"/C/Users/robos/Documents/Python Programs/OBS/websocket_test.py",
		"/C/Program Files/obs-studio/data/obs-plugins/frontend-tools/scripts/url-text.py",
		"/C/Users/robos/Documents/Python Programs/OBS/tally.py",
		"/C/Users/robos/AppData/Local/Packages/PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0/LocalCache/local-packages/Python38/site-packages/serial/__init__.py",
		"/C/Program Files/obs-studio/data/obs-plugins/frontend-tools/scripts/pause-scene.lua",
		"/C/Users/robos/Documents/Python Programs/covid19/datadraw.py",
		"/C/Users/robos/Documents/Python Programs/FixtureCount2.py"
	],
	"find":
	{
		"height": 90.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"usart_tx",
			"isr(",
			"isr",
			"setIsr",
			"::setIsrMode",
			"fetchout",
			"rdmtrans",
			"break_",
			"break_rate",
			"frameb",
			"frame",
			"src",
			":processf",
			":proces",
			"processf",
			":getSlot",
			"getSlot",
			"getBuffer",
			"controller",
			"DMX_Master",
			"category",
			"checksum",
			"processF",
			"uid_cs",
			"uid",
			"initali",
			"dst",
			"rdm_mess",
			"initialize",
			"initial",
			"init",
			"initialize",
			"m_dev",
			"null",
			"_control",
			"controller",
			"master",
			"setStart",
			"dmx_udr",
			"digital",
			"#define",
			"define ",
			"define",
			"#de",
			"timer",
			"timer1",
			"__vector",
			"RH_ASK_MAX_MESS",
			"RH_ASK_MAX",
			"symbols",
			"crc",
			"rhcrc",
			"{",
			"digitalPinTo",
			"blit",
			"player.y",
			"isPlayerNextToSolid",
			"play",
			"enemy",
			"act",
			"print",
			"tick",
			"clock",
			"isplayernext",
			"blit",
			"640",
			"print",
			"csv",
			",6,",
			"6,",
			"print",
			"tsxName",
			"runleft",
			"print",
			"itemList",
			"clockrate",
			"y=\"0",
			"if fps",
			"pointValue",
			"serial",
			"font",
			"ffont",
			"font"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"isObjectNextToSolid",
			"tmxName",
			"levelList"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Rdm_Uid.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2605,
						"regions":
						{
						},
						"selection":
						[
							[
								1061,
								1061
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 807.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Rdm_Defines.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11018,
						"regions":
						{
						},
						"selection":
						[
							[
								4434,
								4449
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5240.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "DMX2.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12616,
						"regions":
						{
						},
						"selection":
						[
							[
								1945,
								1945
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2912.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "DMX2.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37085,
						"regions":
						{
						},
						"selection":
						[
							[
								34118,
								34118
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12615.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 78.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 315.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/C++/C++ Single File.sublime-build",
	"project": "dmx2_project.sublime-project",
	"replace":
	{
		"height": 152.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
